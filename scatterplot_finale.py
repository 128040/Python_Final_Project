# -*- coding: utf-8 -*-
"""scatterplot_finale.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FtIhopwq1JrkI97oFqzZr-bITwyqJaXs
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')

# %cd "/content/drive/My Drive/Colab Notebooks/Python_Project/Python_Data"

import pandas as pd
import matplotlib.pyplot as plt


df_happy = pd.read_csv('Zufriedenheit_Index.csv', delimiter=';')

df_happy_clean = df_happy.copy()

variables_set = ['happy', 'debt', 'age', 'education', 'poverty', 'growth', 'labour_hour']

df_happy_clean = df_happy_clean[df_happy_clean.columns.tolist()]

df_happy_clean[variables_set] = df_happy_clean[variables_set].replace(",", ".", regex=True).astype("float")


import matplotlib.pyplot as plt

# Extrahieren der Daten
happy_values = df_happy_clean['happy']
debt_values = df_happy_clean['debt']
country_labels = df_happy_clean['Country']

# Erstellen des Scatterplots
plt.figure(figsize=(10, 8))  # Größe des Plots (optional)
plt.scatter(happy_values, debt_values, s=df_happy_clean['debt']*10, c='blue', alpha=0.7, edgecolors='black')

# Beschriftungen und Titel
plt.xlabel('Happiness')
plt.ylabel('Debt')
plt.title('Happiness vs. Debt')

# Länderbeschriftungen
for i, txt in enumerate(country_labels):
    plt.annotate(txt, (happy_values[i], debt_values[i]), fontsize=8)

# Anzeigen des Plots ohne Gitterlinien
plt.grid(False)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Extrahieren der Daten
happy_values = df_happy_clean['happy']
debt_values = df_happy_clean['debt']

# Berechnen der Regressionslinie
m, b = np.polyfit(happy_values, debt_values, 1)  # lineare Regression

# Erstellen des Scatterplots
plt.figure(figsize=(10, 8))
plt.scatter(happy_values, debt_values, s=df_happy_clean['debt']*10, c='blue', alpha=0.7, edgecolors='black')

# Beschriftungen und Titel
plt.xlabel('Happiness')
plt.ylabel('Debt')
plt.title('Happiness vs. Debt + Regressionline')

# Länderbeschriftungen
for i, txt in enumerate(df_happy_clean['Country']):
    plt.annotate(txt, (happy_values[i], debt_values[i]), fontsize=8)

# Anzeigen des Plots ohne Gitterlinien
plt.grid(False)

# Plot der Regressionslinie
x_fit = np.linspace(min(happy_values), max(happy_values), 100)  # Wertebereich für die Linie
y_fit = m * x_fit + b  # Berechnen der y-Werte für die Linie
plt.plot(x_fit, y_fit, color='red')  # Plotten der Linie

plt.show()

# Extrahieren der Daten
happy_values = df_happy_clean['happy']
poverty_values = df_happy_clean['poverty']

# Berechnen der Regressionslinie
m, b = np.polyfit(happy_values, poverty_values, 1)  # lineare Regression

# Erstellen des Scatterplots
plt.figure(figsize=(12, 10))
plt.scatter(happy_values, poverty_values, s=df_happy_clean['poverty']*15, c='blue', alpha=0.7, edgecolors='black')

# Beschriftungen und Titel
# Beschriftungen und Titel
plt.xlabel('Happiness')
plt.ylabel('Poverty')
plt.title('Happiness vs. Poverty + Regressionline')

# Länderbeschriftungen
for i, txt in enumerate(df_happy_clean['Country']):
    plt.annotate(txt, (happy_values[i], poverty_values[i]), fontsize=8)

# Anzeigen des Plots ohne Gitterlinien
plt.grid(False)
# Plot der Regressionslinie
x_fit = np.linspace(min(happy_values), max(happy_values), 100)
y_fit = m * x_fit + b  # Berechnen der y-Werte für die Linie
plt.plot(x_fit, y_fit, color='red')  # Plotten der Linie


plt.show()

# Extrahieren der Daten
happy_values = df_happy_clean['happy']
growth_values = df_happy_clean['growth']

# Berechnen der Regressionslinie
m, b = np.polyfit(happy_values, growth_values_values, 1)  # lineare Regression

# Erstellen des Scatterplots
plt.figure(figsize=(12, 10))

plt.scatter(happy_values, growth_values, s=df_happy_clean['growth']*20, c='blue', alpha=0.7, edgecolors='black')

# Beschriftungen und Titel
# Beschriftungen und Titel
plt.xlabel('Happiness')
plt.ylabel('Growth')
plt.title('Happiness vs. Poverty + Regressionline')


# Länderbeschriftungen
for i, txt in enumerate(df_happy_clean['Country']):
    plt.annotate(txt, (happy_values[i], growth_values[i]), fontsize=8)

# Anzeigen des Plots ohne Gitterlinien
plt.grid(False)
# Plot der Regressionslinie
x_fit = np.linspace(min(happy_values), max(happy_values), 100)
y_fit = m * x_fit + b  # Berechnen der y-Werte für die Linie
plt.plot(x_fit, y_fit, color='red')  # Plotten der Linie


plt.show()

# Extrahieren der Daten
happy_values = df_happy_clean['happy']
education_values = df_happy_clean['education']

# Berechnen der Regressionslinie
m, b = np.polyfit(happy_values, education_values, 1)  # lineare Regression

# Erstellen des Scatterplots
plt.figure(figsize=(12, 10))

plt.scatter(happy_values, education_values, s=df_happy_clean['education']*20, c='blue', alpha=0.7, edgecolors='black')

# Beschriftungen und Titel
# Beschriftungen und Titel
plt.xlabel('Happiness')
plt.ylabel('Education')
plt.title('Happiness vs. Education + Regressionline')

# Länderbeschriftungen
for i, txt in enumerate(df_happy_clean['Country']):
    plt.annotate(txt, (happy_values[i], education_values[i]), fontsize=8)

# Anzeigen des Plots ohne Gitterlinien
plt.grid(False)
# Plot der Regressionslinie
x_fit = np.linspace(min(happy_values), max(happy_values), 100)
y_fit = m * x_fit + b  # Berechnen der y-Werte für die Linie
plt.plot(x_fit, y_fit, color='red')  # Plotten der Linie


plt.show()

# Extrahieren der Daten
happy_values = df_happy_clean['happy']
age_values = df_happy_clean['age']

# Berechnen der Regressionslinie
m, b = np.polyfit(happy_values, age_values, 1)  # lineare Regression

# Erstellen des Scatterplots
plt.figure(figsize=(12, 10))

plt.scatter(happy_values, age_values, s=df_happy_clean['age']*20, c='blue', alpha=0.7, edgecolors='black')

# Beschriftungen und Titel
# Beschriftungen und Titel
plt.xlabel('Happiness')
plt.ylabel('Age')
plt.title('Happiness vs. Age + Regressionline')

# Länderbeschriftungen
for i, txt in enumerate(df_happy_clean['Country']):
    plt.annotate(txt, (happy_values[i], age_values[i]), fontsize=8)

# Anzeigen des Plots ohne Gitterlinien
plt.grid(False)
# Plot der Regressionslinie
x_fit = np.linspace(min(happy_values), max(happy_values), 100)
y_fit = m * x_fit + b  # Berechnen der y-Werte für die Linie
plt.plot(x_fit, y_fit, color='red')  # Plotten der Linie


plt.show()

# Extrahieren der Daten
education_values = df_happy_clean['education']
age_values = df_happy_clean['age']

# Berechnen der Regressionslinie
m, b = np.polyfit(education_values, age_values, 1)  # lineare Regression

# Erstellen des Scatterplots
plt.figure(figsize=(12, 10))

plt.scatter(education_values, age_values, s=df_happy_clean['age']*20, c='blue', alpha=0.7, edgecolors='black')

# Beschriftungen und Titel
# Beschriftungen und Titel
plt.xlabel('Education')
plt.ylabel('Age')
plt.title('Education vs. Age + Regressionline')

# Länderbeschriftungen
for i, txt in enumerate(df_happy_clean['Country']):
    plt.annotate(txt, (education_values[i], age_values[i]), fontsize=8)

# Anzeigen des Plots ohne Gitterlinien
plt.grid(False)
# Plot der Regressionslinie
x_fit = np.linspace(min(education_values), max(education_values), 100)
y_fit = m * x_fit + b  # Berechnen der y-Werte für die Linie
plt.plot(x_fit, y_fit, color='red')  # Plotten der Linie


plt.show()